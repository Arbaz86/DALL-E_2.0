import React from "react";
import { Card, Loader, FormField } from "../components";
import { Box, Flex, Grid, Heading, Text } from "@chakra-ui/react";
import { useState } from "react";
import { useEffect } from "react";

const RenderCards = ({ data, title }) => {
  if (data?.length > 0) {
    return data.map((post) => <Card key={post.id} {...post} />);
  }

  return (
    <Heading as="h2" size="md" textTransform="uppercase" mt="5" color="#6449ff">
      {title}
    </Heading>
  );
};

const Home = () => {
  const [loading, setLoading] = useState(false);
  const [allPosts, setAllPosts] = useState(null);
  const [searchText, setSearchText] = useState("");
  const [searchResults, setSearchResults] = useState(null);
  const [searchTimeout, setSearchTimeout] = useState(null);

  const fetchPost = async () => {
    try {
      setLoading(true);
      const response = await fetch("http://localhost:8080/api/v1/post", {
        method: "GET",
        headers: {
          "Content-type": "application/json",
        },
      });

      if (response.ok) {
        const result = await response.json();

        setAllPosts(result.data.reverse());
      }
    } catch (error) {
      toast({
        title: error.message,
        status: "error",
        duration: 3000,
        isClosable: true,
      });
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchPost()
  }, [])

  const handleSearchChange = (e) => {
    clearTimeout(searchTimeout)

    setSearchText(e.target.value)
    setSearchTimeout(
      setTimeout(() => {
        const searchResults = allPosts.filter((item) => item.name.toLowerCase().includes(searchText.toLowerCase()) || item.prompt.toLowerCase().includes(searchText.toLowerCase()))
        setSearchResults(searchResults)
      }, 500)
    )
  }

  return (
    <Box maxW="7xl" m="auto">
      <Box>
        <Heading fontWeight="600" as="h1" color="#222328" fontSize="32px">
          The Community Showcase
        </Heading>
        <Text mt="2" color="#666e75" fontSize="14px" maxW="500px">
          Browse through a collection of imaginative and visually stunning
          images generated by DALL-E AI
        </Text>
      </Box>
      <Box mt="16">
        <FormField labelName="Search Post" type="text" name="text" placeholder="Search posts" value={searchText} handleChange={handleSearchChange} />
      </Box>

      <Box mt="10">
        {loading ? (
          <Flex justifyContent="center" alignItems="center">
            <Loader />
          </Flex>
        ) : (
          <>
            {searchText && (
              <Heading size="md" as="h2" color="#666e75" mb="3">
                showing results for
              </Heading>
            )}

            <Flex
              flexWrap="wrap"

              gap={10}
            >
              {searchText ? (
                <RenderCards data={searchResults} title="No Search result found" />
              ) : (

                <RenderCards
                  data={allPosts}
                  title="No posts found"
                />
              )}
            </Flex>
          </>
        )}
      </Box>
    </Box>
  );
};

export default Home;
